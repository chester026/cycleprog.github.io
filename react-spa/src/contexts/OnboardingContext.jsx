import React, { createContext, useContext, useState, useEffect } from 'react';
import { apiFetch } from '../utils/api';
import OnboardingModal from '../components/OnboardingModal';

const OnboardingContext = createContext();

export const useOnboarding = () => {
  const context = useContext(OnboardingContext);
  if (!context) {
    throw new Error('useOnboarding must be used within an OnboardingProvider');
  }
  return context;
};

export const OnboardingProvider = ({ children }) => {
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [isFirstLogin, setIsFirstLogin] = useState(false);

  const checkOnboardingStatus = async (retryCount = 0) => {
    try {
      const profile = await apiFetch('/api/user-profile');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ profile —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ Response
      if (profile && typeof profile === 'object' && !profile.onboarding_completed) {
        console.log('üéØ OnboardingContext: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ');
        setShowOnboarding(true);
        setIsFirstLogin(true);
      } else {
        console.log('‚úÖ OnboardingContext: –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå Error checking onboarding status:', error);
      
      // Retry logic –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
      if (retryCount < 3 && error.message?.includes('404')) {
        console.log(`üîÑ OnboardingContext: retry #${retryCount + 1} —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
        setTimeout(() => {
          checkOnboardingStatus(retryCount + 1);
        }, 2000);
      }
    }
  };

  const handleOnboardingComplete = () => {
    setShowOnboarding(false);
    setIsFirstLogin(false);
  };

  const handleOnboardingSkip = () => {
    setShowOnboarding(false);
    setIsFirstLogin(false);
  };

  useEffect(() => {
    // Check onboarding status when the app loads
    const token = localStorage.getItem('token') || sessionStorage.getItem('token');
    if (token) {
      checkOnboardingStatus();
    }

    // –°–ª—É—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    const handleOnboardingComplete = () => {
      console.log('üîÑ OnboardingContext: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞');
      setShowOnboarding(false);
      setIsFirstLogin(false);
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è localStorage –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const handleStorageChange = (e) => {
      if (e.key === 'token' && e.newValue) {
        console.log('üîÑ OnboardingContext: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥');
        setTimeout(() => {
          checkOnboardingStatus();
        }, 500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      }
    };

    // –°–ª—É—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–∏–∑ ExchangeTokenPage)
    const handleTokenUpdate = () => {
      console.log('üîÑ OnboardingContext: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
      setTimeout(() => {
        checkOnboardingStatus();
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    };

    window.addEventListener('onboardingComplete', handleOnboardingComplete);
    window.addEventListener('storage', handleStorageChange);
    window.addEventListener('tokenUpdated', handleTokenUpdate);

    return () => {
      window.removeEventListener('onboardingComplete', handleOnboardingComplete);
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('tokenUpdated', handleTokenUpdate);
    };
  }, []);

  return (
    <OnboardingContext.Provider value={{
      showOnboarding,
      isFirstLogin,
      checkOnboardingStatus,
      handleOnboardingComplete,
      handleOnboardingSkip
    }}>
      {children}
      <OnboardingModal
        isOpen={showOnboarding}
        onComplete={handleOnboardingComplete}
        onSkip={handleOnboardingSkip}
      />
    </OnboardingContext.Provider>
  );
}; 