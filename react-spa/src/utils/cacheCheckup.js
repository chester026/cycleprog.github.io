// –°–∏—Å—Ç–µ–º–∞ —á–µ–∫-–∞–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
import { CACHE_TTL, CLEANUP_TTL } from './cacheConstants';
import { apiFetch } from './api';
import { jwtDecode } from 'jwt-decode';

// –°—Ç–∞—Ç—É—Å—ã —á–µ–∫-–∞–ø–∞
export const CHECKUP_STATUS = {
  PENDING: 'pending',
  IN_PROGRESS: 'in_progress',
  COMPLETED: 'completed',
  ERROR: 'error'
};

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–µ–∫-–∞–ø–∞
export const DATA_TYPES = {
  ACTIVITIES: 'activities',
  STREAMS: 'streams',
  GOALS: 'goals',
  WEATHER: 'weather',
  IMAGES: 'images'
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫-–∞–ø–æ–º –∫—ç—à–∞
export class CacheCheckup {
  constructor() {
    this.status = CHECKUP_STATUS.PENDING;
    this.results = {};
    this.errors = [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å userId –∏–∑ —Ç–æ–∫–µ–Ω–∞
  getUserId() {
    const token = localStorage.getItem('token') || sessionStorage.getItem('token');
    if (!token) return null;
    try {
      const decoded = jwtDecode(token);
      return decoded.userId;
    } catch {
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  async checkActivitiesCache() {
    try {
      const userId = this.getUserId();
      const cacheKey = userId ? `activities_${userId}` : 'activities';
      const cached = localStorage.getItem(`cycleprog_cache_${cacheKey}`);
      
      if (!cached) {
        return {
          status: 'missing',
          message: '–ö—ç—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          action: 'fetch_from_api'
        };
      }

      const cacheData = JSON.parse(cached);
      const age = Date.now() - cacheData.timestamp;
      const ttl = cacheData.ttl || CACHE_TTL.ACTIVITIES;

      if (age > ttl) {
        return {
          status: 'expired',
          message: `–ö—ç—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —É—Å—Ç–∞—Ä–µ–ª (${Math.round(age / 60000)} –º–∏–Ω)`,
          action: 'refresh_cache'
        };
      }

      return {
        status: 'valid',
        message: `–ö—ç—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∞–∫—Ç—É–∞–ª–µ–Ω (${Math.round(age / 60000)} –º–∏–Ω)`,
        action: 'use_cache'
      };
    } catch (error) {
      return {
        status: 'error',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${error.message}`,
        action: 'clear_and_refetch'
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à streams –¥–∞–Ω–Ω—ã—Ö
  async checkStreamsCache() {
    try {
      const keys = Object.keys(localStorage);
      const streamKeys = keys.filter(key => key.startsWith('streams_'));
      
      if (streamKeys.length === 0) {
        return {
          status: 'missing',
          message: '–ö—ç—à streams –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          action: 'fetch_when_needed'
        };
      }

      let validCount = 0;
      let expiredCount = 0;
      let errorCount = 0;

      for (const key of streamKeys) {
        try {
          const data = JSON.parse(localStorage.getItem(key));
          const age = Date.now() - data.timestamp;
          const ttl = data.ttl || CACHE_TTL.STREAMS;

          if (age > ttl) {
            expiredCount++;
          } else {
            validCount++;
          }
        } catch (e) {
          errorCount++;
        }
      }

      return {
        status: 'mixed',
        message: `Streams: ${validCount} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö, ${expiredCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, ${errorCount} –æ—à–∏–±–æ–∫`,
        action: expiredCount > 0 ? 'cleanup_expired' : 'use_cache',
        details: { validCount, expiredCount, errorCount }
      };
    } catch (error) {
      return {
        status: 'error',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ streams: ${error.message}`,
        action: 'cleanup_all'
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à —Ü–µ–ª–µ–π
  async checkGoalsCache() {
    try {
      const keys = Object.keys(localStorage);
      const goalKeys = keys.filter(key => key.startsWith('goals_progress_'));
      
      if (goalKeys.length === 0) {
        return {
          status: 'missing',
          message: '–ö—ç—à —Ü–µ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          action: 'calculate_when_needed'
        };
      }

      let validCount = 0;
      let expiredCount = 0;
      let errorCount = 0;

      for (const key of goalKeys) {
        try {
          const data = JSON.parse(localStorage.getItem(key));
          const age = Date.now() - data.timestamp;
          const ttl = CACHE_TTL.GOALS;

          if (age > ttl) {
            expiredCount++;
          } else {
            validCount++;
          }
        } catch (e) {
          errorCount++;
        }
      }

      return {
        status: 'mixed',
        message: `–¶–µ–ª–∏: ${validCount} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö, ${expiredCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, ${errorCount} –æ—à–∏–±–æ–∫`,
        action: expiredCount > 0 ? 'cleanup_expired' : 'use_cache',
        details: { validCount, expiredCount, errorCount }
      };
    } catch (error) {
      return {
        status: 'error',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ —Ü–µ–ª–µ–π: ${error.message}`,
        action: 'cleanup_all'
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
  checkCacheSize() {
    try {
      let totalSize = 0;
      const keys = Object.keys(localStorage);
      
      for (const key of keys) {
        const value = localStorage.getItem(key);
        totalSize += key.length + value.length;
      }

      const sizeMB = (totalSize / 1024 / 1024).toFixed(2);
      
      return {
        status: totalSize > 50 * 1024 * 1024 ? 'large' : 'normal', // 50MB limit
        message: `–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${sizeMB} MB`,
        action: totalSize > 50 * 1024 * 1024 ? 'cleanup_old' : 'monitor',
        details: { totalSize, sizeMB }
      };
    } catch (error) {
      return {
        status: 'error',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: ${error.message}`,
        action: 'cleanup_all'
      };
    }
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —á–µ–∫-–∞–ø
  async performFullCheckup() {
    this.status = CHECKUP_STATUS.IN_PROGRESS;
    this.results = {};
    this.errors = [];

    try {
      // console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —á–µ–∫-–∞–ø –∫—ç—à–∞...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      try {
        this.results.activities = await this.checkActivitiesCache();
        if (this.results.activities && this.results.activities.message) {
          // console.log('üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', this.results.activities.message);
        } else {
          console.warn('‚ö†Ô∏è checkActivitiesCache –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', this.results.activities);
          this.results.activities = {
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
            action: 'clear_and_refetch'
          };
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
        this.results.activities = {
          status: 'error',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${error.message}`,
          action: 'clear_and_refetch'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º streams
      try {
        this.results.streams = await this.checkStreamsCache();
        if (this.results.streams && this.results.streams.message) {
          // console.log('üìà Streams:', this.results.streams.message);
        } else {
          console.warn('‚ö†Ô∏è checkStreamsCache –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', this.results.streams);
          this.results.streams = {
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ streams',
            action: 'cleanup_all'
          };
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ streams:', error);
        this.results.streams = {
          status: 'error',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ streams: ${error.message}`,
          action: 'cleanup_all'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–∏
      try {
        this.results.goals = await this.checkGoalsCache();
        if (this.results.goals && this.results.goals.message) {
          // console.log('üéØ –¶–µ–ª–∏:', this.results.goals.message);
        } else {
          console.warn('‚ö†Ô∏è checkGoalsCache –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', this.results.goals);
          this.results.goals = {
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–µ–π',
            action: 'cleanup_all'
          };
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–µ–π:', error);
        this.results.goals = {
          status: 'error',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–µ–π: ${error.message}`,
          action: 'cleanup_all'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
      try {
        this.results.size = this.checkCacheSize();
        if (this.results.size && this.results.size.message) {
          // console.log('üíæ –†–∞–∑–º–µ—Ä:', this.results.size.message);
        } else {
          console.warn('‚ö†Ô∏è checkCacheSize –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', this.results.size);
          this.results.size = {
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞',
            action: 'cleanup_all'
          };
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞:', error);
        this.results.size = {
          status: 'error',
          message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: ${error.message}`,
          action: 'cleanup_all'
        };
      }

      this.status = CHECKUP_STATUS.COMPLETED;
      // console.log('‚úÖ –ß–µ–∫-–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω');

      return this.results;
    } catch (error) {
      this.status = CHECKUP_STATUS.ERROR;
      this.errors.push(error.message);
      console.error('‚ùå –û—à–∏–±–∫–∞ —á–µ–∫-–∞–ø–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  getOptimizationRecommendations() {
    const recommendations = [];

    if (this.results.activities && this.results.activities.action === 'fetch_from_api') {
      recommendations.push({
        type: 'activities',
        priority: 'high',
        action: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ API –∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 30 –º–∏–Ω—É—Ç',
        impact: '–£–ª—É—á—à–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü'
      });
    }

    if (this.results.streams && this.results.streams.action === 'cleanup_expired') {
      recommendations.push({
        type: 'streams',
        priority: 'medium',
        action: '–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ streams –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)',
        impact: '–û—Å–≤–æ–±–æ–¥–∏—Ç –º–µ—Å—Ç–æ –≤ localStorage'
      });
    }

    if (this.results.goals && this.results.goals.action === 'cleanup_expired') {
      recommendations.push({
        type: 'goals',
        priority: 'medium',
        action: '–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏ —Ü–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)',
        impact: '–û—Å–≤–æ–±–æ–¥–∏—Ç –º–µ—Å—Ç–æ –≤ localStorage'
      });
    }

    if (this.results.size && this.results.size.action === 'cleanup_old') {
      recommendations.push({
        type: 'size',
        priority: 'high',
        action: '–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞',
        impact: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫–∏ localStorage'
      });
    }

    return recommendations;
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  async executeRecommendations() {
    const recommendations = this.getOptimizationRecommendations();
    const results = [];

    for (const rec of recommendations) {
      try {
        switch (rec.type) {
          case 'activities':
            if (rec.action.includes('–ó–∞–≥—Ä—É–∑–∏—Ç—å')) {
              const userId = this.getUserId();
              const cacheKey = userId ? `activities_${userId}` : 'activities';
              const data = await apiFetch('/api/activities');
              localStorage.setItem(`cycleprog_cache_${cacheKey}`, JSON.stringify({
                data,
                timestamp: Date.now(),
                ttl: CACHE_TTL.ACTIVITIES
              }));
              results.push({ type: 'activities', status: 'success', message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã' });
            }
            break;

          case 'streams':
            if (rec.action.includes('–û—á–∏—Å—Ç–∏—Ç—å')) {
              const keys = Object.keys(localStorage);
              const streamKeys = keys.filter(key => key.startsWith('streams_'));
              let cleaned = 0;
              
              for (const key of streamKeys) {
                try {
                  const data = JSON.parse(localStorage.getItem(key));
                  const age = Date.now() - data.timestamp;
                  const ttl = data.ttl || CACHE_TTL.STREAMS;
                  
                  if (age > ttl) {
                    localStorage.removeItem(key);
                    cleaned++;
                  }
                } catch (e) {
                  localStorage.removeItem(key);
                  cleaned++;
                }
              }
              results.push({ type: 'streams', status: 'success', message: `–û—á–∏—â–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö streams` });
            }
            break;

          case 'goals':
            if (rec.action.includes('–û—á–∏—Å—Ç–∏—Ç—å')) {
              const keys = Object.keys(localStorage);
              const goalKeys = keys.filter(key => key.startsWith('goals_progress_'));
              let cleaned = 0;
              
              for (const key of goalKeys) {
                try {
                  const data = JSON.parse(localStorage.getItem(key));
                  const age = Date.now() - data.timestamp;
                  
                  if (age > CACHE_TTL.GOALS) {
                    localStorage.removeItem(key);
                    cleaned++;
                  }
                } catch (e) {
                  localStorage.removeItem(key);
                  cleaned++;
                }
              }
              results.push({ type: 'goals', status: 'success', message: `–û—á–∏—â–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—ç—à–µ–π —Ü–µ–ª–µ–π` });
            }
            break;

          case 'size':
            if (rec.action.includes('–û—á–∏—Å—Ç–∏—Ç—å')) {
              // –û—á–∏—â–∞–µ–º –≤—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏
              const keys = Object.keys(localStorage);
              let cleaned = 0;
              
              for (const key of keys) {
                if (key.startsWith('cycleprog_cache_') || key.startsWith('streams_') || key.startsWith('goals_progress_')) {
                  try {
                    const data = JSON.parse(localStorage.getItem(key));
                    const age = Date.now() - data.timestamp;
                    const ttl = data.ttl || CACHE_TTL.ACTIVITIES;
                    
                    if (age > ttl * 2) { // –£–¥–∞–ª—è–µ–º –∫—ç—à–∏ —Å—Ç–∞—Ä—à–µ 2x TTL
                      localStorage.removeItem(key);
                      cleaned++;
                    }
                  } catch (e) {
                    localStorage.removeItem(key);
                    cleaned++;
                  }
                }
              }
              results.push({ type: 'size', status: 'success', message: `–û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π` });
            }
            break;
        }
      } catch (error) {
        results.push({ type: rec.type, status: 'error', message: error.message });
      }
    }

    return results;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const cacheCheckup = new CacheCheckup(); 