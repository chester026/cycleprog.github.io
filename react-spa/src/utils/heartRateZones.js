// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–æ–Ω–∞—Ö –ø—É–ª—å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ streams –¥–∞–Ω–Ω—ã—Ö
import { CACHE_TTL } from './cacheConstants';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {number} activityId - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @returns {Object|null} - streams –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/—É—Å—Ç–∞—Ä–µ–ª–∏
 */
export const getCachedStreamsData = (activityId) => {
  try {
    const cacheKey = `streams_${activityId}`;
    const cached = localStorage.getItem(cacheKey);
    
    if (!cached) return null;
    
    const cacheData = JSON.parse(cached);
    const ttl = cacheData.ttl || CACHE_TTL.STREAMS;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    if (Date.now() - cacheData.timestamp >= ttl) {
      return null; // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª
    }
    
    return cacheData.data;
  } catch (error) {
    console.warn(`Error reading streams cache for activity ${activityId}:`, error);
    return null;
  }
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ –∫–∞–∂–¥–æ–π –∑–æ–Ω–µ –ø—É–ª—å—Å–∞ –¥–ª—è –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {number} activityId - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} zones - –º–∞—Å—Å–∏–≤ –∑–æ–Ω –ø—É–ª—å—Å–∞ —Å min/max –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 * @returns {Array} - –º–∞—Å—Å–∏–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
 */
export const calculateActivityHRZones = (activityId, zones) => {
  const streams = getCachedStreamsData(activityId);
  
  if (!streams || !streams.heartrate?.data) {
    return null; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö streams
  }
  
  const hrData = streams.heartrate.data;
  const zoneTimes = zones.map(() => 0); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
  
  // –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –≤ streams –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É
  for (let i = 0; i < hrData.length; i++) {
    const hr = hrData[i];
    
    if (!hr || hr <= 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–æ–Ω—É
    for (let zoneIndex = 0; zoneIndex < zones.length; zoneIndex++) {
      const zone = zones[zoneIndex];
      if (hr >= zone.min && hr < zone.max) {
        zoneTimes[zoneIndex] += 1; // –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        break;
      }
    }
  }
  
  return zoneTimes;
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–æ–Ω–∞—Ö –ø—É–ª—å—Å–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} activities - –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} zones - –º–∞—Å—Å–∏–≤ –∑–æ–Ω –ø—É–ª—å—Å–∞ —Å min/max –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
 */
export const calculateHRZonesDistribution = (activities, zones) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const zoneData = zones.map(zone => ({
    name: zone.name,
    color: zone.color,
    time: 0
  }));
  
  let activitiesWithStreams = 0;
  let activitiesProcessed = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  for (const activity of activities) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø—É–ª—å—Å–∞
    if (!activity.has_heartrate || !activity.average_heartrate) {
      continue;
    }
    
    activitiesProcessed++;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ streams
    const activityZoneTimes = calculateActivityHRZones(activity.id, zones);
    
    if (activityZoneTimes) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ streams
      activitiesWithStreams++;
      for (let i = 0; i < zoneData.length; i++) {
        zoneData[i].time += activityZoneTimes[i]; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      }
    } else {
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É (–≤–µ—Å—å moving_time –≤ –æ–¥–Ω—É –∑–æ–Ω—É –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –ø—É–ª—å—Å—É)
      const avgHR = activity.average_heartrate;
      const movingTime = activity.moving_time || 0;
      
      for (let i = 0; i < zones.length; i++) {
        if (avgHR >= zones[i].min && avgHR < zones[i].max) {
          zoneData[i].time += movingTime; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
          break;
        }
      }
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–æ–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
  const result = zoneData
    .map(zone => ({
      ...zone,
      time: +(zone.time / 60).toFixed(1)
    }))
    .filter(zone => zone.time > 0);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`HR Zones calculation: ${activitiesWithStreams}/${activitiesProcessed} activities used streams data`);
  
  return result;
};

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –ø—É–ª—å—Å–æ–º (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
 * @param {Array} activities - –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {number} maxActivities - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
 * @returns {Promise<Object>} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 */
export const loadStreamsForHRZones = async (activities, maxActivities = 20) => {
  try {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–µ–∑–¥—ã —Å –ø—É–ª—å—Å–æ–º
    const ridesWithHR = activities
      .filter(activity => activity.type === 'Ride' && activity.has_heartrate)
      .slice(0, maxActivities); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    let loadedCount = 0;
    let cachedCount = 0;
    let errorCount = 0;
    
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è HR –∑–æ–Ω: ${ridesWithHR.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...`);
    
    for (const activity of ridesWithHR) {
      const cacheKey = `streams_${activity.id}`;
      const cached = localStorage.getItem(cacheKey);
      
      if (cached) {
        try {
          const cacheData = JSON.parse(cached);
          const ttl = cacheData.ttl || CACHE_TTL.STREAMS;
          if (Date.now() - cacheData.timestamp < ttl) {
            cachedCount++;
            continue; // –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        } catch (e) {
          localStorage.removeItem(cacheKey);
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
      if (!cached) {
        try {
          const { apiFetch } = await import('./api');
          const res = await apiFetch(`/api/activities/${activity.id}/streams`);
          if (res && res.heartrate) {
            const cacheData = {
              data: res,
              timestamp: Date.now(),
              ttl: CACHE_TTL.STREAMS
            };
            localStorage.setItem(cacheKey, JSON.stringify(cacheData));
            loadedCount++;
          }
        } catch (error) {
          console.warn(`Failed to load streams for activity ${activity.id}:`, error);
          errorCount++;
        }
      }
    }
    
    console.log(`‚úÖ Streams –¥–ª—è HR –∑–æ–Ω: ${cachedCount} –∏–∑ –∫—ç—à–∞, ${loadedCount} –∑–∞–≥—Ä—É–∂–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
    
    return {
      total: ridesWithHR.length,
      cached: cachedCount,
      loaded: loadedCount,
      errors: errorCount
    };
  } catch (error) {
    console.error('Error loading streams data for HR zones:', error);
    return { total: 0, cached: 0, loaded: 0, errors: 1 };
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @param {Array} activities - –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 * @returns {Object} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é streams –¥–∞–Ω–Ω—ã—Ö
 */
export const checkStreamsAvailability = (activities) => {
  let total = 0;
  let withStreams = 0;
  let withHeartRate = 0;
  
  for (const activity of activities) {
    if (activity.type === 'Ride' && activity.has_heartrate) {
      withHeartRate++;
      
      const streams = getCachedStreamsData(activity.id);
      if (streams && streams.heartrate?.data) {
        withStreams++;
      }
      total++;
    }
  }
  
  return {
    total,
    withHeartRate,
    withStreams,
    percentage: total > 0 ? Math.round((withStreams / total) * 100) : 0
  };
};
