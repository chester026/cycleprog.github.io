// –û–±—â–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
import { analyzeHighIntensityTime } from './vo2max';
import { CACHE_TTL, CLEANUP_TTL } from './cacheConstants';

const GOALS_CACHE_PREFIX = 'goals_progress_v2_'; // v2: –¥–æ–±–∞–≤–ª–µ–Ω–æ moving_time –≤ —Ö–µ—à

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
export const createActivitiesHash = (activities) => {
  return JSON.stringify(activities.map(a => ({ 
    id: a.id, 
    start_date: a.start_date, 
    distance: a.distance,
    moving_time: a.moving_time // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è long_rides
  })));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ streams –¥–∞–Ω–Ω—ã—Ö
export const loadStreamsData = async (activities) => {
  try {
    // console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π...`);
    let loadedCount = 0;
    let cachedCount = 0;
    
    for (const act of activities) {
      const cacheKey = `streams_${act.id}`;
      const cached = localStorage.getItem(cacheKey);
      
      if (cached) {
        try {
          const cacheData = JSON.parse(cached);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL (7 –¥–Ω–µ–π –¥–ª—è streams)
          const ttl = cacheData.ttl || CACHE_TTL.STREAMS;
          if (Date.now() - cacheData.timestamp < ttl) {
            cachedCount++;
            continue; // –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        } catch (e) {
          // –ï—Å–ª–∏ –∫—ç—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
          localStorage.removeItem(cacheKey);
        }
      }
      
      if (!cached) {
        try {
          const { apiFetch } = await import('../utils/api');
          const res = await apiFetch(`/api/activities/${act.id}/streams`);
          if (res && res.heartrate) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 7 –¥–Ω–µ–π
            const cacheData = {
              data: res,
              timestamp: Date.now(),
              ttl: CACHE_TTL.STREAMS // 7 –¥–Ω–µ–π
            };
            localStorage.setItem(cacheKey, JSON.stringify(cacheData));
            loadedCount++;
          }
        } catch (error) {
          console.warn(`Failed to load streams for activity ${act.id}:`, error);
        }
      }
    }
    
    // console.log(`‚úÖ Streams –¥–∞–Ω–Ω—ã–µ: ${cachedCount} –∏–∑ –∫—ç—à–∞, ${loadedCount} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
  } catch (error) {
    console.error('Error loading streams data:', error);
  }
};

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è FTP —Ü–µ–ª–µ–π
export const loadStreamsForFTPGoals = async (activities, goal) => {
  try {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ü–µ–ª–∏
    let filteredActivities = activities;
    const now = new Date();
    
    if (goal.period === '4w') {
      const fourWeeksAgo = new Date(now.getTime() - 28 * 24 * 60 * 60 * 1000);
      filteredActivities = activities.filter(a => new Date(a.start_date) > fourWeeksAgo);
    } else if (goal.period === '3m') {
      const threeMonthsAgo = new Date(now.getTime() - 92 * 24 * 60 * 60 * 1000);
      filteredActivities = activities.filter(a => new Date(a.start_date) > threeMonthsAgo);
    } else if (goal.period === 'year') {
      const yearAgo = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
      filteredActivities = activities.filter(a => new Date(a.start_date) > yearAgo);
    }
    
    // console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${filteredActivities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ø–µ—Ä–∏–æ–¥: ${goal.period})...`);
    let loadedCount = 0;
    let cachedCount = 0;
    
    for (const act of filteredActivities) {
      const cacheKey = `streams_${act.id}`;
      const cached = localStorage.getItem(cacheKey);
      
      if (cached) {
        try {
          const cacheData = JSON.parse(cached);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL (7 –¥–Ω–µ–π –¥–ª—è streams)
          const ttl = cacheData.ttl || CACHE_TTL.STREAMS;
          if (Date.now() - cacheData.timestamp < ttl) {
            cachedCount++;
            continue; // –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        } catch (e) {
          // –ï—Å–ª–∏ –∫—ç—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
          localStorage.removeItem(cacheKey);
        }
      }
      
      if (!cached) {
        try {
          const { apiFetch } = await import('../utils/api');
          const res = await apiFetch(`/api/activities/${act.id}/streams`);
          if (res && res.heartrate) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 7 –¥–Ω–µ–π
            const cacheData = {
              data: res,
              timestamp: Date.now(),
              ttl: CACHE_TTL.STREAMS // 7 –¥–Ω–µ–π
            };
            localStorage.setItem(cacheKey, JSON.stringify(cacheData));
            loadedCount++;
          }
        } catch (error) {
          console.warn(`Failed to load streams for activity ${act.id}:`, error);
        }
      }
    }
    
    // console.log(`‚úÖ Streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è FTP —Ü–µ–ª–∏: ${cachedCount} –∏–∑ –∫—ç—à–∞, ${loadedCount} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
  } catch (error) {
    console.error('Error loading streams data for FTP goals:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏
export const calculateGoalProgress = (goal, activities, userProfile = null) => {
  try {
    if (!activities || activities.length === 0) return 0;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ü–µ–ª–∏
    let filteredActivities = activities;
    const now = new Date();
    
    if (goal.period === '4w') {
      const fourWeeksAgo = new Date(now.getTime() - 28 * 24 * 60 * 60 * 1000);
      filteredActivities = activities.filter(a => new Date(a.start_date) > fourWeeksAgo);
    } else if (goal.period === '3m') {
      const threeMonthsAgo = new Date(now.getTime() - 92 * 24 * 60 * 60 * 1000);
      filteredActivities = activities.filter(a => new Date(a.start_date) > threeMonthsAgo);
    } else if (goal.period === 'year') {
      const yearAgo = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
      filteredActivities = activities.filter(a => new Date(a.start_date) > yearAgo);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ü–µ–ª–∏
    switch (goal.goal_type) {
      case 'distance':
        return filteredActivities.reduce((sum, a) => sum + (a.distance || 0), 0) / 1000; // –∫–º
      case 'elevation':
        return filteredActivities.reduce((sum, a) => sum + (a.total_elevation_gain || 0), 0); // –º–µ—Ç—Ä—ã
      case 'time':
        const totalMovingTime = filteredActivities.reduce((sum, a) => sum + (a.moving_time || 0), 0);
        const totalHours = totalMovingTime / 3600;
        return totalHours;
      case 'speed_flat':
        const flatActivities = filteredActivities.filter(a => {
          const distance = a.distance || 0;
          const elevation = a.total_elevation_gain || 0;
          return distance > 3000 && elevation < distance * 0.03;
        });
        if (flatActivities.length === 0) return 0;
        const flatSpeeds = flatActivities.map(a => (a.average_speed || 0) * 3.6);
        const avgSpeed = flatSpeeds.reduce((sum, speed) => sum + speed, 0) / flatSpeeds.length;
        return avgSpeed;
      case 'speed_hills':
        const hillActivities = filteredActivities.filter(a => {
          const distance = a.distance || 0;
          const elevation = a.total_elevation_gain || 0;
          return distance > 3000 && elevation >= distance * 0.025;
        });
        if (hillActivities.length === 0) return 0;
        const hillSpeeds = hillActivities.map(a => (a.average_speed || 0) * 3.6);
        const avgHillSpeed = hillSpeeds.reduce((sum, speed) => sum + speed, 0) / hillSpeeds.length;
        return avgHillSpeed;
      case 'long_rides':
        return filteredActivities.filter(a => 
          (a.distance || 0) > 50000 || 
          (a.moving_time || 0) > 2.5 * 3600
        ).length;
      case 'intervals':
        const intervalActivities = filteredActivities.filter(a => {
          if (a.type === 'Workout' || a.workout_type === 3) return true;
          
          const name = (a.name || '').toLowerCase();
          const intervalKeywords = [
            '–∏–Ω—Ç–µ—Ä–≤–∞–ª', 'interval', 'tempo', '—Ç–µ–º–ø–æ', 'threshold', '–ø–æ—Ä–æ–≥',
            'vo2max', 'vo2', '–∞–Ω–∞—ç—Ä–æ–±–Ω—ã–π', 'anaerobic', '—Ñ–∞—Ä—Ç–ª–µ–∫', 'fartlek',
            '—Å–ø—Ä–∏–Ω—Ç', 'sprint', '—É—Å–∫–æ—Ä–µ–Ω–∏–µ', 'acceleration', '–ø–æ–≤—Ç–æ—Ä', 'repeat',
            '—Å–µ—Ä–∏—è', 'series', '–±–ª–æ–∫', 'block', '–ø–∏—Ä–∞–º–∏–¥–∞', 'pyramid'
          ];
          
          if (intervalKeywords.some(keyword => name.includes(keyword))) return true;
          
          if (a.average_speed && a.max_speed) {
            const avgSpeed = a.average_speed * 3.6;
            const maxSpeed = a.max_speed * 3.6;
            const speedVariation = maxSpeed / avgSpeed;
            if (speedVariation > 1.4 && avgSpeed > 25) return true;
          }
          
          return false;
        });
        return intervalActivities.length;
      case 'pulse':
        const pulseActivities = filteredActivities.filter(a => a.average_heartrate && a.average_heartrate > 0);
        if (pulseActivities.length === 0) return 0;
        const totalPulse = pulseActivities.reduce((sum, a) => sum + (a.average_heartrate || 0), 0);
        return totalPulse / pulseActivities.length;
      case 'avg_hr_flat':
        const flatPulseActivities = filteredActivities.filter(a => {
          const distance = a.distance || 0;
          const elevation = a.total_elevation_gain || 0;
          return distance > 3000 && elevation < distance * 0.03 && a.average_heartrate && a.average_heartrate > 0;
        });
        if (flatPulseActivities.length === 0) return 0;
        const flatAvgHR = flatPulseActivities.reduce((sum, a) => sum + (a.average_heartrate || 0), 0) / flatPulseActivities.length;
        return Math.round(flatAvgHR);
      case 'avg_hr_hills':
        const hillPulseActivities = filteredActivities.filter(a => {
          const distance = a.distance || 0;
          const elevation = a.total_elevation_gain || 0;
          return distance > 3000 && elevation >= distance * 0.025 && a.average_heartrate && a.average_heartrate > 0;
        });
        if (hillPulseActivities.length === 0) return 0;
        const hillAvgHR = hillPulseActivities.reduce((sum, a) => sum + (a.average_heartrate || 0), 0) / hillPulseActivities.length;
        return Math.round(hillAvgHR);
      case 'avg_power':
        const powerActivities = filteredActivities.filter(a => a.distance > 1000);
        

        
        if (powerActivities.length === 0) return 0;
        
        const GRAVITY = 9.81;
        const AIR_DENSITY_SEA_LEVEL = 1.225;
        const CD_A = 0.4;
        const CRR = 0.005;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const RIDER_WEIGHT = parseFloat(userProfile?.weight) || 75;
        const BIKE_WEIGHT = parseFloat(userProfile?.bike_weight) || 8;
        
        const calculateAirDensity = (temperature, elevation) => {
          const tempK = temperature ? temperature + 273.15 : 288.15;
          const heightM = elevation || 0;
          const pressureAtHeight = 101325 * Math.exp(-heightM / 7400);
          const R = 287.05;
          return pressureAtHeight / (R * tempK);
        };
        
        const totalWeight = RIDER_WEIGHT + BIKE_WEIGHT;
        

        
        const powerValues = powerActivities.map((activity, index) => {
          const distance = parseFloat(activity.distance) || 0;
          const time = parseFloat(activity.moving_time) || 0;
          const elevationGain = parseFloat(activity.total_elevation_gain) || 0;
          const averageSpeed = parseFloat(activity.average_speed) || 0;
          const temperature = activity.average_temp;
          const maxElevation = activity.elev_high;
          
          const airDensity = calculateAirDensity(temperature, maxElevation);
          
          if (distance <= 0 || time <= 0 || averageSpeed <= 0) return 0;
          
          const averageGrade = elevationGain / distance;
          let gravityPower = totalWeight * GRAVITY * averageGrade * averageSpeed;
          const rollingPower = CRR * totalWeight * GRAVITY * averageSpeed;
          const aeroPower = 0.5 * airDensity * CD_A * Math.pow(averageSpeed, 3);
          
          let totalPower = rollingPower + aeroPower;
          
          if (averageGrade > 0) {
            totalPower += gravityPower;
          } else {
            totalPower += gravityPower;
            const minPowerOnDescent = 20;
            totalPower = Math.max(minPowerOnDescent, totalPower);
          }
          

          
          return isNaN(totalPower) || totalPower < 0 || totalPower > 10000 ? 0 : totalPower;
        }).filter(power => power > 0);
        
        if (powerValues.length === 0) return 0;
        return Math.round(powerValues.reduce((sum, power) => sum + power, 0) / powerValues.length);
      case 'cadence':
        const cadenceActivities = filteredActivities.filter(a => a.average_cadence && a.average_cadence > 0);
        if (cadenceActivities.length === 0) return 0;
        const cadenceValues = cadenceActivities.map(a => a.average_cadence);
        return Math.round(cadenceValues.reduce((sum, cadence) => sum + cadence, 0) / cadenceValues.length);
      case 'ftp_vo2max':
        const hrThreshold = goal.hr_threshold !== null && goal.hr_threshold !== undefined ? goal.hr_threshold : 160;
        const durationThreshold = goal.duration_threshold !== null && goal.duration_threshold !== undefined ? goal.duration_threshold : 120;
        
        const periodDays = goal.period === '4w' ? 28 : 
                          goal.period === '3m' ? 92 : 
                          goal.period === 'year' ? 365 : 28;
        
        const { totalTimeMin, totalIntervals } = analyzeHighIntensityTime(filteredActivities, periodDays, {
          hr_threshold: hrThreshold,
          duration_threshold: durationThreshold
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–∏–Ω—É—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è FTP/VO2max —Ü–µ–ª–µ–π
        return {
          minutes: totalTimeMin,
          intervals: totalIntervals
        };
      case 'recovery':
        return filteredActivities.filter(a => a.type === 'Ride' && (a.average_speed || 0) < 20).length;
      default:
        return parseFloat(goal.current_value) || 0;
    }
  } catch (error) {
    console.error('Error in calculateGoalProgress:', error);
    return 0;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
export const getCachedGoals = (activities, goals) => {
  try {
    const activitiesHash = createActivitiesHash(activities);
    const cacheKey = GOALS_CACHE_PREFIX + activitiesHash;
    const cachedProgress = localStorage.getItem(cacheKey);
    
    if (cachedProgress) {
      const cachedData = JSON.parse(cachedProgress);
      if (Date.now() - cachedData.timestamp < CACHE_TTL.GOALS) {
        return cachedData.goals;
      }
    }
    
    return null;
  } catch (error) {
    console.warn('Error getting cached goals:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π –≤ –∫—ç—à
export const cacheGoals = (activities, goals) => {
  try {
    const activitiesHash = createActivitiesHash(activities);
    const cacheKey = GOALS_CACHE_PREFIX + activitiesHash;
    
    const cacheData = {
      goals: goals,
      timestamp: Date.now()
    };
    
    localStorage.setItem(cacheKey, JSON.stringify(cacheData));
  } catch (error) {
    console.warn('Error caching goals:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
export const cleanupOldGoalsCache = () => {
  try {
    const keys = Object.keys(localStorage);
    const goalCacheKeys = keys.filter(key => key.startsWith(GOALS_CACHE_PREFIX));
    
    const cleanupTime = Date.now() - CLEANUP_TTL.GOALS;
    
    goalCacheKeys.forEach(key => {
      try {
        const data = JSON.parse(localStorage.getItem(key));
        if (data && data.timestamp && data.timestamp < cleanupTime) {
          localStorage.removeItem(key);
        }
      } catch (e) {
        localStorage.removeItem(key);
      }
    });
  } catch (e) {
    console.warn('Failed to cleanup goals cache:', e);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –í–°–ï–• –∫—ç—à–µ–π —Ü–µ–ª–µ–π
export const clearAllGoalsCache = () => {
  try {
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
      if (key.startsWith(GOALS_CACHE_PREFIX)) {
        localStorage.removeItem(key);
      }
    });
    console.log('üßπ –í–µ—Å—å –∫—ç—à —Ü–µ–ª–µ–π –æ—á–∏—â–µ–Ω');
  } catch (e) {
    console.warn('Failed to clear goals cache:', e);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export const updateGoalsWithCache = async (activities, goals, userProfile = null) => {
  try {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
    cleanupOldGoalsCache();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedGoals = getCachedGoals(activities, goals);
    if (cachedGoals) {
      return cachedGoals;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ FTP —Ü–µ–ª–∏
    const hasFTPGoals = goals.some(goal => goal.goal_type === 'ftp_vo2max');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å FTP —Ü–µ–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ
    if (hasFTPGoals) {
      // console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã FTP/VO2max —Ü–µ–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ...');
      await loadStreamsData(activities);
              // console.log('‚úÖ Streams –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ FTP/VO2max');
    } else {
              // console.log('‚ÑπÔ∏è FTP/VO2max —Ü–µ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É streams');
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const updatedGoals = goals.map(goal => {
      try {
        const currentValue = calculateGoalProgress(goal, activities, userProfile);
        
        // –î–ª—è FTP/VO2max —Ü–µ–ª–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–∏–Ω—É—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        if (goal.goal_type === 'ftp_vo2max' && typeof currentValue === 'object') {
          return { 
            ...goal, 
            target_value: currentValue.minutes,  // –º–∏–Ω—É—Ç—ã –≤ target_value
            current_value: currentValue.intervals // –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ current_value
          };
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return { ...goal, current_value: currentValue };
      } catch (error) {
        console.error('Error calculating progress for goal:', goal.id, error);
        return { ...goal, current_value: 0 };
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const hasChanges = updatedGoals.some((updatedGoal, index) => {
      const originalGoal = goals[index];
      
      // –î–ª—è FTP/VO2max —Ü–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ target_value, –∏ current_value
      if (updatedGoal.goal_type === 'ftp_vo2max') {
        return updatedGoal.target_value !== originalGoal.target_value || 
               updatedGoal.current_value !== originalGoal.current_value;
      }
      
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ current_value
      return updatedGoal.current_value !== originalGoal.current_value;
    });
    
    if (hasChanges) {
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      cacheGoals(activities, updatedGoals);
      return updatedGoals;
    }
    
    return goals;
  } catch (error) {
    console.error('Error updating goals with cache:', error);
    return goals;
  }
}; 