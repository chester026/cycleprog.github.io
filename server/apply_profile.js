#!/usr/bin/env node

const { Client } = require('pg');
const { profiles } = require('./database_profiles');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const config = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'postgres',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '',
  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
};

async function applyProfile(profileName) {
  const client = new Client(config);
  
  try {
    console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...`);
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const rightsCheck = await client.query('SELECT current_user, session_user;');
    console.log(`üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${rightsCheck.rows[0].current_user}`);
    
    const selectedProfile = profiles[profileName];
    if (!selectedProfile) {
      console.error(`‚ùå –ü—Ä–æ—Ñ–∏–ª—å "${profileName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: ${Object.keys(profiles).join(', ')}`);
      return;
    }
    
    console.log(`\nüéØ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å: ${selectedProfile.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${selectedProfile.description}`);
    console.log(`\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:`);
    
    const results = [];
    
    for (const [name, setting] of Object.entries(selectedProfile.settings)) {
      try {
        console.log(`\nüîß ${name} = ${setting.value}`);
        console.log(`   ${setting.description}`);
        
        await client.query(`ALTER SYSTEM SET ${name} = '${setting.value}';`);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ`);
        results.push({ name, value: setting.value, status: 'success' });
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        results.push({ name, value: setting.value, status: 'error', error: error.message });
      }
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const successCount = results.filter(r => r.status === 'success').length;
    const errorCount = results.filter(r => r.status === 'error').length;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    if (successCount > 0) {
      console.log(`\nüîÑ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:`);
      console.log(`   sudo systemctl restart postgresql`);
      console.log(`   –∏–ª–∏`);
      console.log(`   SELECT pg_reload_conf();`);
    }
    
    console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
    selectedProfile.recommendations.forEach(rec => {
      console.log(`   ‚Ä¢ ${rec}`);
    });
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    console.log(`\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
    console.log(`   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
    console.log(`   ‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å PostgreSQL —Å–µ—Ä–≤–∏—Å–∞`);
  } finally {
    await client.end();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const profileName = process.argv[2];

if (!profileName) {
  console.log(`üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node apply_profile.js <profile_name>`);
  console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:`);
  Object.entries(profiles).forEach(([key, profile]) => {
    console.log(`   ${key}: ${profile.name}`);
  });
  console.log(`\nüí° –ü—Ä–∏–º–µ—Ä: node apply_profile.js low-end`);
  process.exit(1);
}

applyProfile(profileName); 