const { Pool } = require('pg');
require('dotenv').config();

const isProduction = process.env.PGSSLMODE === 'require' || process.env.NODE_ENV === 'production';

const pool = new Pool({
  host: process.env.PGHOST,
  user: process.env.PGUSER,
  password: process.env.PGPASSWORD,
  database: process.env.PGDATABASE,
  port: process.env.PGPORT,
  ssl: isProduction ? { rejectUnauthorized: false } : false
});

async function optimizePostgreSQL() {
  console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PostgreSQL –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å 256 MB RAM...\n');

  try {
    // –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    const currentSettings = await pool.query(`
      SELECT name, setting, unit, context
      FROM pg_settings 
      WHERE name IN (
        'shared_buffers',
        'effective_cache_size', 
        'work_mem',
        'maintenance_work_mem',
        'wal_buffers',
        'max_connections',
        'checkpoint_segments',
        'checkpoint_completion_target',
        'wal_writer_delay',
        'random_page_cost',
        'effective_io_concurrency'
      )
      ORDER BY name;
    `);

    currentSettings.rows.forEach(row => {
      console.log(`  ${row.name}: ${row.setting} ${row.unit || ''} (${row.context})`);
    });

    console.log('\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...\n');

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 256 MB RAM
    const optimizations = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏
      { name: 'shared_buffers', value: '16MB', description: '6% –æ—Ç RAM - –æ–±—â–∏–µ –±—É—Ñ–µ—Ä—ã' },
      { name: 'effective_cache_size', value: '128MB', description: '50% –æ—Ç RAM - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫—ç—à' },
      { name: 'work_mem', value: '512kB', description: '–ü–∞–º—è—Ç—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' },
      { name: 'maintenance_work_mem', value: '2MB', description: '–ü–∞–º—è—Ç—å –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è' },
      { name: 'wal_buffers', value: '1MB', description: '–ë—É—Ñ–µ—Ä—ã WAL' },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      { name: 'max_connections', value: '10', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π' },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WAL –∏ checkpoint
      { name: 'checkpoint_segments', value: '2', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ WAL' },
      { name: 'checkpoint_completion_target', value: '0.9', description: '–¶–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è checkpoint' },
      { name: 'wal_writer_delay', value: '200ms', description: '–ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø–∏—Å–∏ WAL' },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      { name: 'random_page_cost', value: '1.1', description: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ' },
      { name: 'effective_io_concurrency', value: '1', description: '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å I/O –æ–ø–µ—Ä–∞—Ü–∏–π' }
    ];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    for (const opt of optimizations) {
      try {
        await pool.query(`ALTER SYSTEM SET ${opt.name} = '${opt.value}';`);
        console.log(`‚úÖ ${opt.name}: ${opt.value} - ${opt.description}`);
      } catch (error) {
        console.log(`‚ùå ${opt.name}: –û—à–∏–±–∫–∞ - ${error.message}`);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...\n');

    // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    const additionalOpts = [
      { name: 'log_statement', value: 'none', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL' },
      { name: 'log_min_duration_statement', value: '-1', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤' },
      { name: 'log_checkpoints', value: 'off', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ checkpoint' },
      { name: 'log_connections', value: 'off', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π' },
      { name: 'log_disconnections', value: 'off', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π' },
      { name: 'log_lock_waits', value: 'off', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫' },
      { name: 'log_temp_files', value: '-1', description: '–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤' }
    ];

    for (const opt of additionalOpts) {
      try {
        await pool.query(`ALTER SYSTEM SET ${opt.name} = '${opt.value}';`);
        console.log(`‚úÖ ${opt.name}: ${opt.value} - ${opt.description}`);
      } catch (error) {
        console.log(`‚ùå ${opt.name}: –û—à–∏–±–∫–∞ - ${error.message}`);
      }
    }

    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL: sudo systemctl restart postgresql');
    console.log('2. –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: SELECT pg_reload_conf();');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

    console.log('\nüìä –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:');
    console.log('‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏');
    console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –º–µ–Ω—å—à–µ swapping');
    console.log('‚úÖ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å - PostgreSQL –Ω–µ –±—É–¥–µ—Ç —É–±–∏—Ç OOM Killer');
    console.log('‚úÖ –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å - —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ');

    console.log('\n‚ö†Ô∏è  –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:');
    console.log('- –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ JOIN');
    console.log('- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ RAM –¥–æ 512 MB –∏–ª–∏ 1 GB');
    console.log('- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
optimizePostgreSQL(); 